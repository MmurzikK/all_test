{
  "uid" : "f2b6893bc7a92a7e",
  "name" : "Добавление в корзину",
  "fullName" : "test.TestRegister#test_addbasket",
  "historyId" : "e1a9f789d5de2acc6077193ecf571a6f",
  "time" : {
    "start" : 1632397733434,
    "stop" : 1632397753984,
    "duration" : 20550
  },
  "description" : "Проверка на добавление в корзину",
  "descriptionHtml" : "<p>Проверка на добавление в корзину</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <a class=\"bem-icon-link bem-icon-link_without-underline bem-icon-link_pseudo bem-icon-link_to-cart bem-icon-link_cart-added\" href=\"/personal/cart/\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed",
  "statusTrace" : "self = <test.TestRegister object at 0x7ff08a4f76a0>\n\n    @allure.title(\"Добавление в корзину\")\n    @allure.description(\"Проверка на добавление в корзину\")\n    def test_addbasket(self):\n        self.driver.get(self.base_url)\n        timeout = 30\n        self.close_modal_city()\n        element_present = EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'div.main-slider__slide-wrapper'))\n        WebDriverWait(self.driver, timeout).until(element_present)\n        new_catalog = self.new_catalog\n        t = 0\n        for link in self.new_catalog:\n    \n            self.driver.get(link)\n            products = WebDriverWait(self.driver, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, \"div.product-card\")))\n    \n            for i in range(len(new_catalog)):\n                section = random.randint(1, len(products) - 1)\n                self.driver.execute_script(\"arguments[0].scrollIntoView();\",\n                                           products[section])\n                t = t + 1\n                button = products[section].find_element_by_css_selector(\".bem-icon-link_to-cart\")  #добавить проверку появления нижнего слайдера\n                button.click()\n    \n>               added_to_basket = WebDriverWait(self.driver, 10).until(lambda _: button.text == \"В корзине\")\n\ntest.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:71: in until\n    value = method(self._driver)\ntest.py:264: in <lambda>\n    added_to_basket = WebDriverWait(self.driver, 10).until(lambda _: button.text == \"В корзине\")\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:628: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:320: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff08a4f02e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element reference of <a class=\\\\\"...evaluate.js:261:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.jsm:79:29\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <a class=\"bem-icon-link bem-icon-link_without-underline bem-icon-link_pseudo bem-icon-link_to-cart bem-icon-link_cart-added\" href=\"/personal/cart/\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_method_fixture_TestRegister",
    "time" : {
      "start" : 1632397724364,
      "stop" : 1632397733434,
      "duration" : 9070
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1632397549230,
      "stop" : 1632397549249,
      "duration" : 19
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "xunit_setup_method_fixture_TestRegister::0",
    "time" : {
      "start" : 1632397754147,
      "stop" : 1632397754767,
      "duration" : 620
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test"
  }, {
    "name" : "subSuite",
    "value" : "TestRegister"
  }, {
    "name" : "host",
    "value" : "9d2fc9ee43bb"
  }, {
    "name" : "thread",
    "value" : "13-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "98f923f4e49aa9e",
        "reportUrl" : "http://localhost:8080/job/uitest/4/allure/#testresult/98f923f4e49aa9e",
        "status" : "passed",
        "time" : {
          "start" : 1631885757194,
          "stop" : 1631885782102,
          "duration" : 24908
        }
      }, {
        "uid" : "c3b04d7d5485e48e",
        "reportUrl" : "http://localhost:8080/job/uitest/3/allure/#testresult/c3b04d7d5485e48e",
        "status" : "passed",
        "time" : {
          "start" : 1631881129561,
          "stop" : 1631881150448,
          "duration" : 20887
        }
      }, {
        "uid" : "3fa390615867b434",
        "reportUrl" : "http://localhost:8080/job/uitest/2/allure/#testresult/3fa390615867b434",
        "status" : "passed",
        "time" : {
          "start" : 1631875226357,
          "stop" : 1631875251482,
          "duration" : 25125
        }
      }, {
        "uid" : "f1f739653fba835a",
        "reportUrl" : "http://localhost:8080/job/uitest/1/allure/#testresult/f1f739653fba835a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message:",
        "time" : {
          "start" : 1631872999335,
          "stop" : 1631873018992,
          "duration" : 19657
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f2b6893bc7a92a7e.json",
  "parameterValues" : [ ]
}